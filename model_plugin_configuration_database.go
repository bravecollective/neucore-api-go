/*
Neucore API

Client library of Neucore API

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neucoreapi

import (
	"encoding/json"
)

// checks if the PluginConfigurationDatabase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginConfigurationDatabase{}

// PluginConfigurationDatabase Plugin configuration stored in database.  API: The required properties are necessary for the service page where users register their account. The rest is necessary for the admin page.
type PluginConfigurationDatabase struct {
	// Directory where the plugin.yml file is stored.  Only from database but always set when the data from the file is read.
	DirectoryName *string `json:"directoryName,omitempty"`
	URLs []PluginConfigurationURL `json:"URLs"`
	TextTop string `json:"textTop"`
	TextAccount string `json:"textAccount"`
	TextRegister string `json:"textRegister"`
	TextPending string `json:"textPending"`
	ConfigurationData string `json:"configurationData"`
	// Inactive plugins are neither updated by the cron job nor displayed to the user.  From admin UI.
	Active *bool `json:"active,omitempty"`
	// From admin UI.
	RequiredGroups []int32 `json:"requiredGroups,omitempty"`
}

// NewPluginConfigurationDatabase instantiates a new PluginConfigurationDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginConfigurationDatabase(uRLs []PluginConfigurationURL, textTop string, textAccount string, textRegister string, textPending string, configurationData string) *PluginConfigurationDatabase {
	this := PluginConfigurationDatabase{}
	this.URLs = uRLs
	this.TextTop = textTop
	this.TextAccount = textAccount
	this.TextRegister = textRegister
	this.TextPending = textPending
	this.ConfigurationData = configurationData
	return &this
}

// NewPluginConfigurationDatabaseWithDefaults instantiates a new PluginConfigurationDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginConfigurationDatabaseWithDefaults() *PluginConfigurationDatabase {
	this := PluginConfigurationDatabase{}
	return &this
}

// GetDirectoryName returns the DirectoryName field value if set, zero value otherwise.
func (o *PluginConfigurationDatabase) GetDirectoryName() string {
	if o == nil || IsNil(o.DirectoryName) {
		var ret string
		return ret
	}
	return *o.DirectoryName
}

// GetDirectoryNameOk returns a tuple with the DirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetDirectoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryName) {
		return nil, false
	}
	return o.DirectoryName, true
}

// HasDirectoryName returns a boolean if a field has been set.
func (o *PluginConfigurationDatabase) HasDirectoryName() bool {
	if o != nil && !IsNil(o.DirectoryName) {
		return true
	}

	return false
}

// SetDirectoryName gets a reference to the given string and assigns it to the DirectoryName field.
func (o *PluginConfigurationDatabase) SetDirectoryName(v string) {
	o.DirectoryName = &v
}

// GetURLs returns the URLs field value
func (o *PluginConfigurationDatabase) GetURLs() []PluginConfigurationURL {
	if o == nil {
		var ret []PluginConfigurationURL
		return ret
	}

	return o.URLs
}

// GetURLsOk returns a tuple with the URLs field value
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetURLsOk() ([]PluginConfigurationURL, bool) {
	if o == nil {
		return nil, false
	}
	return o.URLs, true
}

// SetURLs sets field value
func (o *PluginConfigurationDatabase) SetURLs(v []PluginConfigurationURL) {
	o.URLs = v
}

// GetTextTop returns the TextTop field value
func (o *PluginConfigurationDatabase) GetTextTop() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TextTop
}

// GetTextTopOk returns a tuple with the TextTop field value
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetTextTopOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TextTop, true
}

// SetTextTop sets field value
func (o *PluginConfigurationDatabase) SetTextTop(v string) {
	o.TextTop = v
}

// GetTextAccount returns the TextAccount field value
func (o *PluginConfigurationDatabase) GetTextAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TextAccount
}

// GetTextAccountOk returns a tuple with the TextAccount field value
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetTextAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TextAccount, true
}

// SetTextAccount sets field value
func (o *PluginConfigurationDatabase) SetTextAccount(v string) {
	o.TextAccount = v
}

// GetTextRegister returns the TextRegister field value
func (o *PluginConfigurationDatabase) GetTextRegister() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TextRegister
}

// GetTextRegisterOk returns a tuple with the TextRegister field value
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetTextRegisterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TextRegister, true
}

// SetTextRegister sets field value
func (o *PluginConfigurationDatabase) SetTextRegister(v string) {
	o.TextRegister = v
}

// GetTextPending returns the TextPending field value
func (o *PluginConfigurationDatabase) GetTextPending() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TextPending
}

// GetTextPendingOk returns a tuple with the TextPending field value
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetTextPendingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TextPending, true
}

// SetTextPending sets field value
func (o *PluginConfigurationDatabase) SetTextPending(v string) {
	o.TextPending = v
}

// GetConfigurationData returns the ConfigurationData field value
func (o *PluginConfigurationDatabase) GetConfigurationData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationData
}

// GetConfigurationDataOk returns a tuple with the ConfigurationData field value
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetConfigurationDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigurationData, true
}

// SetConfigurationData sets field value
func (o *PluginConfigurationDatabase) SetConfigurationData(v string) {
	o.ConfigurationData = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PluginConfigurationDatabase) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PluginConfigurationDatabase) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PluginConfigurationDatabase) SetActive(v bool) {
	o.Active = &v
}

// GetRequiredGroups returns the RequiredGroups field value if set, zero value otherwise.
func (o *PluginConfigurationDatabase) GetRequiredGroups() []int32 {
	if o == nil || IsNil(o.RequiredGroups) {
		var ret []int32
		return ret
	}
	return o.RequiredGroups
}

// GetRequiredGroupsOk returns a tuple with the RequiredGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginConfigurationDatabase) GetRequiredGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.RequiredGroups) {
		return nil, false
	}
	return o.RequiredGroups, true
}

// HasRequiredGroups returns a boolean if a field has been set.
func (o *PluginConfigurationDatabase) HasRequiredGroups() bool {
	if o != nil && !IsNil(o.RequiredGroups) {
		return true
	}

	return false
}

// SetRequiredGroups gets a reference to the given []int32 and assigns it to the RequiredGroups field.
func (o *PluginConfigurationDatabase) SetRequiredGroups(v []int32) {
	o.RequiredGroups = v
}

func (o PluginConfigurationDatabase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginConfigurationDatabase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DirectoryName) {
		toSerialize["directoryName"] = o.DirectoryName
	}
	toSerialize["URLs"] = o.URLs
	toSerialize["textTop"] = o.TextTop
	toSerialize["textAccount"] = o.TextAccount
	toSerialize["textRegister"] = o.TextRegister
	toSerialize["textPending"] = o.TextPending
	toSerialize["configurationData"] = o.ConfigurationData
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.RequiredGroups) {
		toSerialize["requiredGroups"] = o.RequiredGroups
	}
	return toSerialize, nil
}

type NullablePluginConfigurationDatabase struct {
	value *PluginConfigurationDatabase
	isSet bool
}

func (v NullablePluginConfigurationDatabase) Get() *PluginConfigurationDatabase {
	return v.value
}

func (v *NullablePluginConfigurationDatabase) Set(val *PluginConfigurationDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginConfigurationDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginConfigurationDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginConfigurationDatabase(val *PluginConfigurationDatabase) *NullablePluginConfigurationDatabase {
	return &NullablePluginConfigurationDatabase{value: val, isSet: true}
}

func (v NullablePluginConfigurationDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginConfigurationDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


