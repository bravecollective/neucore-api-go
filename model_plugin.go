/*
Neucore API

Client library of Neucore API

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neucoreapi

import (
	"encoding/json"
)

// checks if the Plugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plugin{}

// Plugin struct for Plugin
type Plugin struct {
	Id NullableInt32 `json:"id"`
	Name string `json:"name"`
	ConfigurationDatabase *PluginConfigurationDatabase `json:"configurationDatabase,omitempty"`
	ConfigurationFile *PluginConfigurationFile `json:"configurationFile,omitempty"`
}

// NewPlugin instantiates a new Plugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlugin(id NullableInt32, name string) *Plugin {
	this := Plugin{}
	this.Id = id
	this.Name = name
	return &this
}

// NewPluginWithDefaults instantiates a new Plugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginWithDefaults() *Plugin {
	this := Plugin{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Plugin) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Plugin) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *Plugin) SetId(v int32) {
	o.Id.Set(&v)
}

// GetName returns the Name field value
func (o *Plugin) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Plugin) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Plugin) SetName(v string) {
	o.Name = v
}

// GetConfigurationDatabase returns the ConfigurationDatabase field value if set, zero value otherwise.
func (o *Plugin) GetConfigurationDatabase() PluginConfigurationDatabase {
	if o == nil || IsNil(o.ConfigurationDatabase) {
		var ret PluginConfigurationDatabase
		return ret
	}
	return *o.ConfigurationDatabase
}

// GetConfigurationDatabaseOk returns a tuple with the ConfigurationDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetConfigurationDatabaseOk() (*PluginConfigurationDatabase, bool) {
	if o == nil || IsNil(o.ConfigurationDatabase) {
		return nil, false
	}
	return o.ConfigurationDatabase, true
}

// HasConfigurationDatabase returns a boolean if a field has been set.
func (o *Plugin) HasConfigurationDatabase() bool {
	if o != nil && !IsNil(o.ConfigurationDatabase) {
		return true
	}

	return false
}

// SetConfigurationDatabase gets a reference to the given PluginConfigurationDatabase and assigns it to the ConfigurationDatabase field.
func (o *Plugin) SetConfigurationDatabase(v PluginConfigurationDatabase) {
	o.ConfigurationDatabase = &v
}

// GetConfigurationFile returns the ConfigurationFile field value if set, zero value otherwise.
func (o *Plugin) GetConfigurationFile() PluginConfigurationFile {
	if o == nil || IsNil(o.ConfigurationFile) {
		var ret PluginConfigurationFile
		return ret
	}
	return *o.ConfigurationFile
}

// GetConfigurationFileOk returns a tuple with the ConfigurationFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plugin) GetConfigurationFileOk() (*PluginConfigurationFile, bool) {
	if o == nil || IsNil(o.ConfigurationFile) {
		return nil, false
	}
	return o.ConfigurationFile, true
}

// HasConfigurationFile returns a boolean if a field has been set.
func (o *Plugin) HasConfigurationFile() bool {
	if o != nil && !IsNil(o.ConfigurationFile) {
		return true
	}

	return false
}

// SetConfigurationFile gets a reference to the given PluginConfigurationFile and assigns it to the ConfigurationFile field.
func (o *Plugin) SetConfigurationFile(v PluginConfigurationFile) {
	o.ConfigurationFile = &v
}

func (o Plugin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["name"] = o.Name
	if !IsNil(o.ConfigurationDatabase) {
		toSerialize["configurationDatabase"] = o.ConfigurationDatabase
	}
	if !IsNil(o.ConfigurationFile) {
		toSerialize["configurationFile"] = o.ConfigurationFile
	}
	return toSerialize, nil
}

type NullablePlugin struct {
	value *Plugin
	isSet bool
}

func (v NullablePlugin) Get() *Plugin {
	return v.value
}

func (v *NullablePlugin) Set(val *Plugin) {
	v.value = val
	v.isSet = true
}

func (v NullablePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullablePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlugin(val *Plugin) *NullablePlugin {
	return &NullablePlugin{value: val, isSet: true}
}

func (v NullablePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


