/*
 * Neucore API
 *
 * Client library of Neucore API
 *
 * API version: 1.22.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neucoreapi

import (
	"encoding/json"
)

// EsiLocation struct for EsiLocation
type EsiLocation struct {
	Id int64 `json:"id"`
	Category string `json:"category"`
	Name string `json:"name"`
}

// NewEsiLocation instantiates a new EsiLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsiLocation(id int64, category string, name string) *EsiLocation {
	this := EsiLocation{}
	this.Id = id
	this.Category = category
	this.Name = name
	return &this
}

// NewEsiLocationWithDefaults instantiates a new EsiLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsiLocationWithDefaults() *EsiLocation {
	this := EsiLocation{}
	return &this
}

// GetId returns the Id field value
func (o *EsiLocation) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EsiLocation) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EsiLocation) SetId(v int64) {
	o.Id = v
}

// GetCategory returns the Category field value
func (o *EsiLocation) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *EsiLocation) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *EsiLocation) SetCategory(v string) {
	o.Category = v
}

// GetName returns the Name field value
func (o *EsiLocation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EsiLocation) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EsiLocation) SetName(v string) {
	o.Name = v
}

func (o EsiLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["category"] = o.Category
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableEsiLocation struct {
	value *EsiLocation
	isSet bool
}

func (v NullableEsiLocation) Get() *EsiLocation {
	return v.value
}

func (v *NullableEsiLocation) Set(val *EsiLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableEsiLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableEsiLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsiLocation(val *EsiLocation) *NullableEsiLocation {
	return &NullableEsiLocation{value: val, isSet: true}
}

func (v NullableEsiLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsiLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


