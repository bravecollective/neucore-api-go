/*
Neucore API

Client library of Neucore API

API version: 1.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neucoreapi

import (
	"encoding/json"
)

// App struct for App
type App struct {
	// App ID
	Id int32 `json:"id"`
	// App name
	Name string `json:"name"`
	// Roles for authorization.
	Roles *[]Role `json:"roles,omitempty"`
	// Groups the app can see.
	Groups *[]Group `json:"groups,omitempty"`
	EveLogins *[]EveLogin `json:"eveLogins,omitempty"`
}

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp(id int32, name string) *App {
	this := App{}
	this.Id = id
	this.Name = name
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetId returns the Id field value
func (o *App) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *App) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *App) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *App) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *App) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *App) SetName(v string) {
	o.Name = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *App) GetRoles() []Role {
	if o == nil || o.Roles == nil {
		var ret []Role
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetRolesOk() (*[]Role, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *App) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *App) SetRoles(v []Role) {
	o.Roles = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *App) GetGroups() []Group {
	if o == nil || o.Groups == nil {
		var ret []Group
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetGroupsOk() (*[]Group, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *App) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []Group and assigns it to the Groups field.
func (o *App) SetGroups(v []Group) {
	o.Groups = &v
}

// GetEveLogins returns the EveLogins field value if set, zero value otherwise.
func (o *App) GetEveLogins() []EveLogin {
	if o == nil || o.EveLogins == nil {
		var ret []EveLogin
		return ret
	}
	return *o.EveLogins
}

// GetEveLoginsOk returns a tuple with the EveLogins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetEveLoginsOk() (*[]EveLogin, bool) {
	if o == nil || o.EveLogins == nil {
		return nil, false
	}
	return o.EveLogins, true
}

// HasEveLogins returns a boolean if a field has been set.
func (o *App) HasEveLogins() bool {
	if o != nil && o.EveLogins != nil {
		return true
	}

	return false
}

// SetEveLogins gets a reference to the given []EveLogin and assigns it to the EveLogins field.
func (o *App) SetEveLogins(v []EveLogin) {
	o.EveLogins = &v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.EveLogins != nil {
		toSerialize["eveLogins"] = o.EveLogins
	}
	return json.Marshal(toSerialize)
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


