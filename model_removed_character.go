/*
Neucore API

Client library of Neucore API

API version: 1.33.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neucoreapi

import (
	"encoding/json"
	"time"
)

// RemovedCharacter struct for RemovedCharacter
type RemovedCharacter struct {
	NewPlayerId *int32 `json:"newPlayerId,omitempty"`
	NewPlayerName *string `json:"newPlayerName,omitempty"`
	Player *Player `json:"player,omitempty"`
	// EVE character ID.
	CharacterId NullableInt64 `json:"characterId"`
	// EVE character name.
	CharacterName NullableString `json:"characterName"`
	// Date of removal.
	RemovedDate NullableTime `json:"removedDate"`
	// How it was removed (deleted or moved to another account).
	Reason NullableString `json:"reason"`
	DeletedBy *Player `json:"deletedBy,omitempty"`
}

// NewRemovedCharacter instantiates a new RemovedCharacter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemovedCharacter(characterId NullableInt64, characterName NullableString, removedDate NullableTime, reason NullableString) *RemovedCharacter {
	this := RemovedCharacter{}
	this.CharacterId = characterId
	this.CharacterName = characterName
	this.RemovedDate = removedDate
	this.Reason = reason
	return &this
}

// NewRemovedCharacterWithDefaults instantiates a new RemovedCharacter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemovedCharacterWithDefaults() *RemovedCharacter {
	this := RemovedCharacter{}
	return &this
}

// GetNewPlayerId returns the NewPlayerId field value if set, zero value otherwise.
func (o *RemovedCharacter) GetNewPlayerId() int32 {
	if o == nil || o.NewPlayerId == nil {
		var ret int32
		return ret
	}
	return *o.NewPlayerId
}

// GetNewPlayerIdOk returns a tuple with the NewPlayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemovedCharacter) GetNewPlayerIdOk() (*int32, bool) {
	if o == nil || o.NewPlayerId == nil {
		return nil, false
	}
	return o.NewPlayerId, true
}

// HasNewPlayerId returns a boolean if a field has been set.
func (o *RemovedCharacter) HasNewPlayerId() bool {
	if o != nil && o.NewPlayerId != nil {
		return true
	}

	return false
}

// SetNewPlayerId gets a reference to the given int32 and assigns it to the NewPlayerId field.
func (o *RemovedCharacter) SetNewPlayerId(v int32) {
	o.NewPlayerId = &v
}

// GetNewPlayerName returns the NewPlayerName field value if set, zero value otherwise.
func (o *RemovedCharacter) GetNewPlayerName() string {
	if o == nil || o.NewPlayerName == nil {
		var ret string
		return ret
	}
	return *o.NewPlayerName
}

// GetNewPlayerNameOk returns a tuple with the NewPlayerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemovedCharacter) GetNewPlayerNameOk() (*string, bool) {
	if o == nil || o.NewPlayerName == nil {
		return nil, false
	}
	return o.NewPlayerName, true
}

// HasNewPlayerName returns a boolean if a field has been set.
func (o *RemovedCharacter) HasNewPlayerName() bool {
	if o != nil && o.NewPlayerName != nil {
		return true
	}

	return false
}

// SetNewPlayerName gets a reference to the given string and assigns it to the NewPlayerName field.
func (o *RemovedCharacter) SetNewPlayerName(v string) {
	o.NewPlayerName = &v
}

// GetPlayer returns the Player field value if set, zero value otherwise.
func (o *RemovedCharacter) GetPlayer() Player {
	if o == nil || o.Player == nil {
		var ret Player
		return ret
	}
	return *o.Player
}

// GetPlayerOk returns a tuple with the Player field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemovedCharacter) GetPlayerOk() (*Player, bool) {
	if o == nil || o.Player == nil {
		return nil, false
	}
	return o.Player, true
}

// HasPlayer returns a boolean if a field has been set.
func (o *RemovedCharacter) HasPlayer() bool {
	if o != nil && o.Player != nil {
		return true
	}

	return false
}

// SetPlayer gets a reference to the given Player and assigns it to the Player field.
func (o *RemovedCharacter) SetPlayer(v Player) {
	o.Player = &v
}

// GetCharacterId returns the CharacterId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RemovedCharacter) GetCharacterId() int64 {
	if o == nil || o.CharacterId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.CharacterId.Get()
}

// GetCharacterIdOk returns a tuple with the CharacterId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemovedCharacter) GetCharacterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CharacterId.Get(), o.CharacterId.IsSet()
}

// SetCharacterId sets field value
func (o *RemovedCharacter) SetCharacterId(v int64) {
	o.CharacterId.Set(&v)
}

// GetCharacterName returns the CharacterName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RemovedCharacter) GetCharacterName() string {
	if o == nil || o.CharacterName.Get() == nil {
		var ret string
		return ret
	}

	return *o.CharacterName.Get()
}

// GetCharacterNameOk returns a tuple with the CharacterName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemovedCharacter) GetCharacterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CharacterName.Get(), o.CharacterName.IsSet()
}

// SetCharacterName sets field value
func (o *RemovedCharacter) SetCharacterName(v string) {
	o.CharacterName.Set(&v)
}

// GetRemovedDate returns the RemovedDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *RemovedCharacter) GetRemovedDate() time.Time {
	if o == nil || o.RemovedDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.RemovedDate.Get()
}

// GetRemovedDateOk returns a tuple with the RemovedDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemovedCharacter) GetRemovedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovedDate.Get(), o.RemovedDate.IsSet()
}

// SetRemovedDate sets field value
func (o *RemovedCharacter) SetRemovedDate(v time.Time) {
	o.RemovedDate.Set(&v)
}

// GetReason returns the Reason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RemovedCharacter) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}

	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemovedCharacter) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// SetReason sets field value
func (o *RemovedCharacter) SetReason(v string) {
	o.Reason.Set(&v)
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *RemovedCharacter) GetDeletedBy() Player {
	if o == nil || o.DeletedBy == nil {
		var ret Player
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemovedCharacter) GetDeletedByOk() (*Player, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *RemovedCharacter) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given Player and assigns it to the DeletedBy field.
func (o *RemovedCharacter) SetDeletedBy(v Player) {
	o.DeletedBy = &v
}

func (o RemovedCharacter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NewPlayerId != nil {
		toSerialize["newPlayerId"] = o.NewPlayerId
	}
	if o.NewPlayerName != nil {
		toSerialize["newPlayerName"] = o.NewPlayerName
	}
	if o.Player != nil {
		toSerialize["player"] = o.Player
	}
	if true {
		toSerialize["characterId"] = o.CharacterId.Get()
	}
	if true {
		toSerialize["characterName"] = o.CharacterName.Get()
	}
	if true {
		toSerialize["removedDate"] = o.RemovedDate.Get()
	}
	if true {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	return json.Marshal(toSerialize)
}

type NullableRemovedCharacter struct {
	value *RemovedCharacter
	isSet bool
}

func (v NullableRemovedCharacter) Get() *RemovedCharacter {
	return v.value
}

func (v *NullableRemovedCharacter) Set(val *RemovedCharacter) {
	v.value = val
	v.isSet = true
}

func (v NullableRemovedCharacter) IsSet() bool {
	return v.isSet
}

func (v *NullableRemovedCharacter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemovedCharacter(val *RemovedCharacter) *NullableRemovedCharacter {
	return &NullableRemovedCharacter{value: val, isSet: true}
}

func (v NullableRemovedCharacter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemovedCharacter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


