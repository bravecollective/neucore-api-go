/*
Neucore API

Client library of Neucore API

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neucoreapi

import (
	"encoding/json"
)

// checks if the Alliance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alliance{}

// Alliance EVE Alliance.
type Alliance struct {
	// EVE alliance ID.
	Id NullableInt64 `json:"id"`
	// EVE alliance name.
	Name NullableString `json:"name"`
	// Alliance ticker.
	Ticker NullableString `json:"ticker"`
	// Groups for automatic assignment (API: not included by default).
	Groups []Group `json:"groups,omitempty"`
}

// NewAlliance instantiates a new Alliance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlliance(id NullableInt64, name NullableString, ticker NullableString) *Alliance {
	this := Alliance{}
	this.Id = id
	this.Name = name
	this.Ticker = ticker
	return &this
}

// NewAllianceWithDefaults instantiates a new Alliance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllianceWithDefaults() *Alliance {
	this := Alliance{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *Alliance) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alliance) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *Alliance) SetId(v int64) {
	o.Id.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Alliance) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alliance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *Alliance) SetName(v string) {
	o.Name.Set(&v)
}

// GetTicker returns the Ticker field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Alliance) GetTicker() string {
	if o == nil || o.Ticker.Get() == nil {
		var ret string
		return ret
	}

	return *o.Ticker.Get()
}

// GetTickerOk returns a tuple with the Ticker field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alliance) GetTickerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ticker.Get(), o.Ticker.IsSet()
}

// SetTicker sets field value
func (o *Alliance) SetTicker(v string) {
	o.Ticker.Set(&v)
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *Alliance) GetGroups() []Group {
	if o == nil || IsNil(o.Groups) {
		var ret []Group
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alliance) GetGroupsOk() ([]Group, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *Alliance) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []Group and assigns it to the Groups field.
func (o *Alliance) SetGroups(v []Group) {
	o.Groups = v
}

func (o Alliance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alliance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["name"] = o.Name.Get()
	toSerialize["ticker"] = o.Ticker.Get()
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	return toSerialize, nil
}

type NullableAlliance struct {
	value *Alliance
	isSet bool
}

func (v NullableAlliance) Get() *Alliance {
	return v.value
}

func (v *NullableAlliance) Set(val *Alliance) {
	v.value = val
	v.isSet = true
}

func (v NullableAlliance) IsSet() bool {
	return v.isSet
}

func (v *NullableAlliance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlliance(val *Alliance) *NullableAlliance {
	return &NullableAlliance{value: val, isSet: true}
}

func (v NullableAlliance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlliance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


