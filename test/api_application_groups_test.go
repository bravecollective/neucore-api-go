/*
Neucore API

Testing ApplicationGroupsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package neucoreapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_neucoreapi_ApplicationGroupsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ApplicationGroupsApiService AllianceGroupsBulkV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationGroupsApi.AllianceGroupsBulkV1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService AllianceGroupsV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var aid int32

        resp, httpRes, err := apiClient.ApplicationGroupsApi.AllianceGroupsV1(context.Background(), aid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService AllianceGroupsV2", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var aid int32

        resp, httpRes, err := apiClient.ApplicationGroupsApi.AllianceGroupsV2(context.Background(), aid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService CorpGroupsBulkV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationGroupsApi.CorpGroupsBulkV1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService CorpGroupsV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cid int32

        resp, httpRes, err := apiClient.ApplicationGroupsApi.CorpGroupsV1(context.Background(), cid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService CorpGroupsV2", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cid int32

        resp, httpRes, err := apiClient.ApplicationGroupsApi.CorpGroupsV2(context.Background(), cid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService GroupMembersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var groupId int32

        resp, httpRes, err := apiClient.ApplicationGroupsApi.GroupMembersV1(context.Background(), groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService GroupsBulkV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationGroupsApi.GroupsBulkV1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService GroupsV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cid int32

        resp, httpRes, err := apiClient.ApplicationGroupsApi.GroupsV1(context.Background(), cid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService GroupsV2", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cid int32

        resp, httpRes, err := apiClient.ApplicationGroupsApi.GroupsV2(context.Background(), cid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationGroupsApiService GroupsWithFallbackV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationGroupsApi.GroupsWithFallbackV1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
