/*
Neucore API

Testing ApplicationCharactersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package neucoreapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_neucoreapi_ApplicationCharactersApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ApplicationCharactersApiService CharacterListV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationCharactersApi.CharacterListV1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService CharactersBulkV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationCharactersApi.CharactersBulkV1(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService CharactersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var characterId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.CharactersV1(context.Background(), characterId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService CorporationCharactersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var corporationId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.CorporationCharactersV1(context.Background(), corporationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService CorporationPlayersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var corporationId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.CorporationPlayersV1(context.Background(), corporationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService IncomingCharactersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var characterId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.IncomingCharactersV1(context.Background(), characterId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService MainV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cid int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.MainV1(context.Background(), cid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService MainV2", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var cid int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.MainV2(context.Background(), cid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService PlayerCharactersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.PlayerCharactersV1(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService PlayerV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var characterId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.PlayerV1(context.Background(), characterId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService PlayerWithCharactersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var characterId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.PlayerWithCharactersV1(context.Background(), characterId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationCharactersApiService RemovedCharactersV1", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var characterId int32

        resp, httpRes, err := apiClient.ApplicationCharactersApi.RemovedCharactersV1(context.Background(), characterId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
