/*
Neucore API

Client library of Neucore API

API version: 1.43.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package neucoreapi

import (
	"encoding/json"
)

// EsiType An EVE name from the category \"inventory_type\".
type EsiType struct {
	Id NullableInt64 `json:"id"`
	Name NullableString `json:"name"`
}

// NewEsiType instantiates a new EsiType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsiType(id NullableInt64, name NullableString) *EsiType {
	this := EsiType{}
	this.Id = id
	this.Name = name
	return &this
}

// NewEsiTypeWithDefaults instantiates a new EsiType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsiTypeWithDefaults() *EsiType {
	this := EsiType{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *EsiType) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsiType) GetIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *EsiType) SetId(v int64) {
	o.Id.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EsiType) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsiType) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *EsiType) SetName(v string) {
	o.Name.Set(&v)
}

func (o EsiType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEsiType struct {
	value *EsiType
	isSet bool
}

func (v NullableEsiType) Get() *EsiType {
	return v.value
}

func (v *NullableEsiType) Set(val *EsiType) {
	v.value = val
	v.isSet = true
}

func (v NullableEsiType) IsSet() bool {
	return v.isSet
}

func (v *NullableEsiType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsiType(val *EsiType) *NullableEsiType {
	return &NullableEsiType{value: val, isSet: true}
}

func (v NullableEsiType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsiType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


